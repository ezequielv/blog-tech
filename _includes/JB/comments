{% if site.JB.comments.provider and page.comments != false %}

{% comment %}
  TODO: do per-module "pre" and "post" includes so that most/every generic module can include files at the right moment
{% endcomment %}
{% include local/debug_messages.html %}

{% comment %}
  TODO: disable forced debug messages in this module
{% assign jb_module_comments_debug_enabled = true %}
{% endcomment %}

{% if jb_module_debug_messages_enabled %}
  {% assign jb_module_comments_debug_enabled = true %}
{% endif %}
{% comment %}
{% if is_production != true %}
  {% assign jb_module_comments_debug_enabled = true %}
{% endif %}
{% endcomment %}

{% if jb_module_comments_debug_enabled %}
  <h2>JB/comments debug messages</h2>

  <ul>
{% endif %}

{% if jb_comment_id %}
{% else %}
  {% if page.comments_var_id_ident_method and page.comments_var_id_ident_method != "none" %}

    {% comment %}
      TODO: a single string is treated like an array, in terms of 'for' loops, so we can always either:
        - use the source variable as it was;
        - just assign it to the 'dest' variable -- no need for the "split with impossible separator" trick.
    {% endcomment %}
    {% comment %}assign to l_ident_stages an array with the top-level ids taken from the page front matter{% endcomment %}
    {% if page.comments_var_id_ident_method[0] %}
      {% assign l_ident_stages = page.comments_var_id_ident_method %}
    {% else %}
      {% comment %} transform: string =] list{% endcomment %}
      {% assign l_ident_stages = page.comments_var_id_ident_method | split: "--impossible-separator--" %}
    {% endif %}
    {% if jb_module_comments_debug_enabled %}
      <li>l_ident_stages: {{ l_ident_stages | join: ", " }};</li>
    {% endif %}

    {% capture l_ident_stages_string %}:edge_delim:{{ l_ident_stages | join: ":" }}:edge_delim:{% endcapture %}
    {% assign l_ident_stages_inner_list = "auto:ident:pageid:relurl" | split: ":" %}

    {% if jb_module_comments_debug_enabled %}
      <li>l_ident_stages_string (for replacements): {{ l_ident_stages_string }};</li>
    {% endif %}

    {% assign l_ident_stages_string_last = l_ident_stages_string %}
    {% for l_i in (1..100) %}
      {% for l_ident_stage_inner_now in l_ident_stages_inner_list %}
        {% assign l_stage_replace_src = l_ident_stage_inner_now %}
        {% assign l_stage_replace_dst = nil %}

        {% case l_ident_stage_inner_now %}
        {% when "auto" %}
          {% assign l_stage_replace_dst = "ident:relurl" %}
        {% when "ident" %}
          {% assign l_stage_replace_dst = "commentid:pageid" %}
        {% endcase %}

        {% if l_stage_replace_src and l_stage_replace_dst %}
          {% assign l_ident_stages_string = l_ident_stages_string | replace: l_stage_replace_src, l_stage_replace_dst %}
        {% endif %}
      {% endfor %}

      {% if l_ident_stages_string == l_ident_stages_string_last %}
        {% break %}
      {% endif %}
      {% assign l_ident_stages_string_last = l_ident_stages_string %}
    {% endfor %}

    {% assign l_ident_stages = l_ident_stages_string | replace: ":edge_delim:", "" | split: ":" %}

    {% if jb_module_comments_debug_enabled %}
      <li>l_ident_stages_string (replaced): {{ l_ident_stages_string }};</li>
      <li>l_ident_stages (replaced, list): {{ l_ident_stages | join: ", " }};</li>
    {% endif %}

    {% for l_ident_stage_now in l_ident_stages %}
      {% if jb_module_comments_debug_enabled %}
        <li>l_ident_stage_now: {{ l_ident_stage_now }};</li>
      {% endif %}

      {% if jb_comment_id and jb_comment_id.size > 0 %}
        {% break %}
      {% endif %}

      {% comment %}see also: https://jekyllrb.com/docs/variables/{% endcomment %}
      {% case l_ident_stage_now %}
      {% when "commentid" %}
        {% assign jb_comment_id = page.comment_id %}
      {% when "pageid" %}
        {% assign jb_comment_id = page.id %}
      {% when "relurl" %}
        {% assign jb_comment_id = page.url %}
      {% endcase %}
    {% endfor %}

    {% if jb_comment_id and jb_comment_id.size > 0 %}
    {% else %}
      {% assign jb_comment_id = nil %}
    {% endif %}
  {% endif %}
{% endif %}

{% if page.comments_var_url_enable %}
  {% if jb_comment_url %}
  {% else %}
    {% if jb_base_path %}
    {% else %}
      {% if site.JB.BASE_PATH and site.JB.BASE_PATH != '' %}
        {% assign jb_base_path = site.JB.BASE_PATH %}
      {% endif %}
    {% endif %}
    {% capture jb_comment_url %}{{ jb_base_path }}{{ page.url }}{% endcapture %}
  {% endif %}
  {% assign jb_comment_url = jb_comment_url | default: nil %}
{% endif %}


{% if jb_module_comments_debug_enabled %}
    <li>jb_comment_id: {{ jb_comment_id }};</li>
    <li>jb_comment_url: {{ jb_comment_url }};</li>
  </ul>
{% endif %}

{% case site.JB.comments.provider %}
{% when "disqus" %}
  {% include JB/comments-providers/disqus %}
{% when "livefyre" %}
  {% include JB/comments-providers/livefyre %}
{% when "intensedebate" %}
  {% include JB/comments-providers/intensedebate %}
{% when "facebook" %}
  {% include JB/comments-providers/facebook %}
{% when "duoshuo" %}
  {% include JB/comments-providers/duoshuo %}
{% when "custom" %}
  {% include custom/comments %}
{% endcase %}

{% endif %}
